<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.phoenix.dataobject.auth.mapper.RolePermissionMapper">
  <resultMap id="BaseResultMap" type="com.phoenix.dataobject.auth.RolePermission">
    <id column="role_permission_id" jdbcType="VARCHAR" property="rolePermissionId" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="permission_id" jdbcType="VARCHAR" property="permissionId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    role_permission_id, role_id, permission_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from role_permission
    where role_permission_id = #{rolePermissionId,jdbcType=VARCHAR}
  </select>

  <select id="selectByParams" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from role_permission
    where 1=1
    <if test="roleId != null">
      and role_id = #{roleId,jdbcType=VARCHAR}
    </if>
    <if test="permissionId != null">
      and permission_id = #{permissionId,jdbcType=VARCHAR}
    </if>
  </select>

  <select id="selectByPermissionId" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT role_permission.*
    FROM role_permission LEFT JOIN permission
    ON role_permission.permission_id = permission.permission_id
    WHERE permission.parent_id = #{permissionId,jdbcType=VARCHAR}
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from role_permission
    where role_permission_id = #{rolePermissionId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.phoenix.dataobject.auth.RolePermission">
    insert into role_permission (role_permission_id, role_id, permission_id, 
      create_time, update_time)
    values (#{rolePermissionId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, #{permissionId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.phoenix.dataobject.auth.RolePermission">
    insert into role_permission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="rolePermissionId != null">
        role_permission_id,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="permissionId != null">
        permission_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="rolePermissionId != null">
        #{rolePermissionId,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null">
        #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.phoenix.dataobject.auth.RolePermission">
    update role_permission
    <set>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null">
        permission_id = #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where role_permission_id = #{rolePermissionId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.phoenix.dataobject.auth.RolePermission">
    update role_permission
    set role_id = #{roleId,jdbcType=VARCHAR},
      permission_id = #{permissionId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where role_permission_id = #{rolePermissionId,jdbcType=VARCHAR}
  </update>
</mapper>